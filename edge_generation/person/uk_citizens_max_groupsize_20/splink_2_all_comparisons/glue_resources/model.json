{
  "link_type": "dedupe_only",
  "unique_id_column_name": "unique_id",
  "blocking_rules": [
    "l.outward_postcode_std = r.outward_postcode_std and l.dob = r.dob",
    "l.postcode = r.postcode and l.dob_year = r.dob_year",
    "l.postcode = r.postcode and l.dob_month = r.dob_month",
    "l.postcode = r.postcode and l.dob_day = r.dob_day",
    "l.forename1_dm = r.forename1_dm and l.occupation = r.occupation and l.dob_year = r.dob_year",
    "l.forename1_dm = r.forename1_dm and l.surname_dm = r.surname_dm and l.dob_year = r.dob_year",
    "l.cluster = r.cluster"
  ],
  "comparison_columns": [
    {
      "col_name": "surname_std",
      "case_expression": "case\n    when surname_std_l is null or surname_std_r is null then -1\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.7 then 1\n    else 0 end  as gamma_surname_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9815535458882655, 0.01702147278961079, 0.0009467517176883091,
        0.000478229604435411
      ],
      "fix_u_probabilities": true,
      "gamma_index": 0,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.07240818309823538, 0.0321355399610105, 0.16040526515654802,
        0.7350510117842062
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "col_name": "forename1_std",
      "case_expression": "case\n    when forename1_std_l is null or forename1_std_r is null then -1\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.7 then 1\n    else 0 end  as gamma_forename1_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9688003904050667, 0.023979437999617027, 0.002538025910778438,
        0.004682145684537844
      ],
      "fix_u_probabilities": true,
      "gamma_index": 1,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.13403671528234382, 0.14266283483454684, 0.1592117531187429,
        0.5640886967643663
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "col_name": "forename2_std",
      "u_probabilities": [0.9944011755574279, 0.005598824442572162],
      "fix_u_probabilities": true,
      "gamma_index": 2,
      "num_levels": 2,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "case_expression": "case\n    when forename2_std_l is null or forename2_std_r is null then -1\n    when forename2_std_l = forename2_std_r then 1\n    else 0 end  as gamma_forename2_std",
      "m_probabilities": [0.45046006489195584, 0.5491184781868657],
      "tf_adjustment_weights": [0.0, 1.0]
    },
    {
      "col_name": "occupation",
      "num_levels": 2,
      "term_frequency_adjustments": true,
      "u_probabilities": [0.9610981197116958, 0.038901880288304165],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "fix_m_probabilities": false,
      "case_expression": "case\n    when occupation_l is null or occupation_r is null then -1\n    when occupation_l = occupation_r then 1\n    else 0 end  as gamma_occupation",
      "m_probabilities": [0.09239257514375197, 0.9063858362519609],
      "tf_adjustment_weights": [0.0, 1.0]
    },
    {
      "col_name": "dob",
      "case_expression": "case\n    when dob_l is null or dob_r is null then -1\n    when dob_l = dob_r  and substr(dob_l, -5) = '01-01'  then 2\n    when dob_l = dob_r  then 3\n    when levenshtein(dob_l, dob_r) <= 1 then 1\n    else 0 end  as gamma_dob",
      "num_levels": 4,
      "u_probabilities": [
        0.9952418875904521, 0.0044526281327271254, 0.0002855674532696181,
        1.991682355116964e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 4,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.05821779718683403, 0.35353616185122505, 0.13045860257664382,
        0.4574964976432637
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 1.0]
    },
    {
      "custom_name": "custom_postcode_distance_comparison",
      "custom_columns_used": ["postcode", "lat_lng", "birth_place"],
      "case_expression": "case\nwhen (postcode_l is null or postcode_r is null) then -1\nwhen postcode_l = postcode_r then 4\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 5) then 3\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 50)  then 2\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 150)  then 1\nelse 0\nend  as gamma_custom_postcode_distance_comparison",
      "num_levels": 5,
      "u_probabilities": [
        0.6928572557513167, 0.22484002475028844, 0.07508570415106333,
        0.007201939888190511, 1.5075459141019576e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.05823407629524921, 0.022042801762141195, 0.10512067111048799,
        0.137934762447468, 0.6766676883846536
      ],
      "tf_adjustment_weights": [0.0, 0.0, 0.0, 0.0, 1.0]
    }
  ],
  "additional_columns_to_retain": ["cluster", "source_dataset"],
  "em_convergence": 0.001,
  "max_iterations": 100,
  "retain_intermediate_calculation_columns": false,
  "retain_matching_columns": false,
  "source_dataset_column_name": "source_dataset",
  "proportion_of_matches": 1.191406124866352e-9
}
