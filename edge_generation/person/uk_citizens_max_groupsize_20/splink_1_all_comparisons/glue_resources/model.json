{
  "link_type": "dedupe_only",
  "unique_id_column_name": "unique_id",
  "blocking_rules": [
    "l.outward_postcode_std = r.outward_postcode_std and l.dob = r.dob",
    "l.postcode = r.postcode and l.dob_year = r.dob_year",
    "l.postcode = r.postcode and l.dob_month = r.dob_month",
    "l.postcode = r.postcode and l.dob_day = r.dob_day",
    "l.forename1_dm = r.forename1_dm and l.occupation = r.occupation and l.dob_year = r.dob_year",
    "l.forename1_dm = r.forename1_dm and l.surname_dm = r.surname_dm and l.dob_year = r.dob_year",
    "l.cluster = r.cluster"
  ],
  "comparison_columns": [
    {
      "col_name": "surname_std",
      "case_expression": "case\n    when (surname_std_l is null or surname_std_r is null) then -1\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.7 then 1\n    else 0 end  as gamma_surname_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9812561876189689, 0.01734776982336185, 0.0009303147095895034,
        0.0004657278480797465
      ],
      "fix_u_probabilities": true,
      "gamma_index": 0,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.07131501287221909, 0.03218583017587662, 0.16075308620929718,
        0.7357460856437683
      ]
    },
    {
      "col_name": "forename1_std",
      "case_expression": "case\n    when (forename1_std_l is null or forename1_std_r is null) then -1\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 1.0 then 3\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.88 then 2\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.7 then 1\n    else 0 end  as gamma_forename1_std",
      "num_levels": 4,
      "term_frequency_adjustments": true,
      "u_probabilities": [
        0.9693457689626294, 0.023642413819082934, 0.0025259962374963,
        0.0044858209807914
      ],
      "fix_u_probabilities": true,
      "gamma_index": 1,
      "data_type": "string",
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.13277274370193481, 0.14281822741031647, 0.15939275920391083,
        0.5650162696838379
      ]
    },
    {
      "col_name": "forename2_std",
      "u_probabilities": [0.9945720747723726, 0.00542792522762742],
      "fix_u_probabilities": true,
      "gamma_index": 2,
      "num_levels": 2,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "case_expression": "case\n    when forename2_std_l is null or forename2_std_r is null then -1\n    when forename2_std_l = forename2_std_r then 1\n    else 0 end  as gamma_forename2_std",
      "m_probabilities": [0.4212869425462999, 0.5775834843866599]
    },
    {
      "col_name": "occupation",
      "num_levels": 2,
      "term_frequency_adjustments": true,
      "u_probabilities": [0.9602075850971326, 0.03979241490286743],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "fix_m_probabilities": false,
      "case_expression": "case\n    when occupation_l is null or occupation_r is null then -1\n    when occupation_l = occupation_r then 1\n    else 0 end  as gamma_occupation",
      "m_probabilities": [0.09707459640929297, 0.9026328785559479]
    },
    {
      "col_name": "dob",
      "case_expression": "case\n    when dob_l is null or dob_r is null then -1\n    when dob_l = dob_r  and substr(dob_l, -5) = '01-01'  then 2\n    when dob_l = dob_r  then 3\n    when levenshtein(dob_l, dob_r) <= 1 then 1\n    else 0 end  as gamma_dob",
      "num_levels": 4,
      "u_probabilities": [
        0.9951566415643641, 0.004550850930926973, 0.00027563277282548036,
        1.6874731883489172e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 4,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.05536173009251905, 0.3717206300092912, 0.12877848565960165,
        0.44355891571687006
      ]
    },
    {
      "custom_name": "custom_postcode_distance_comparison",
      "custom_columns_used": ["postcode", "lat_lng", "birth_place"],
      "case_expression": "case\nwhen (postcode_l is null or postcode_r is null) then -1\nwhen postcode_l = postcode_r then 4\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 5) then 3\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 50)  then 2\nwhen  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 150)  then 1\nelse 0\nend  as gamma_custom_postcode_distance_comparison",
      "num_levels": 5,
      "u_probabilities": [
        0.6886838590776662, 0.2257312508782618, 0.07802605534059652,
        0.007543506474679038, 1.532822879653419e-5
      ],
      "fix_u_probabilities": true,
      "gamma_index": 3,
      "data_type": "string",
      "term_frequency_adjustments": false,
      "fix_m_probabilities": false,
      "m_probabilities": [
        0.06156766414642334, 0.02218124456703663, 0.11730220913887024,
        0.1512303203344345, 0.6477185487747192
      ]
    }
  ],
  "additional_columns_to_retain": ["cluster", "source_dataset"],
  "em_convergence": 0.001,
  "max_iterations": 100,
  "retain_intermediate_calculation_columns": false,
  "retain_matching_columns": false,
  "source_dataset_column_name": "source_dataset",
  "proportion_of_matches": 2.147840686082138e-6
}
